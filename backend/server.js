const express = require("express");
const cors = require("cors");

const app = express();
app.use(cors());
app.use(express.json());

const fs = require("fs");
const path = require("path");

// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞
function readData(file) {
    const filePath = path.join(__dirname, `db/${file}.json`);
    if (!fs.existsSync(filePath)) return [];
    return JSON.parse(fs.readFileSync(filePath, "utf8"));
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ JSON-—Ñ–∞–π–ª–∞
function writeData(file, data) {
    const filePath = path.join(__dirname, `db/${file}.json`);
    fs.writeFileSync(filePath, JSON.stringify(data, null, 4), "utf8");
}

app.post("/login", (req, res) => {
    const { name, emoji = "üôÇ" } = req.body;
    if (!name) return res.status(400).json({ error: "–ò–º—è –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });

    let players = readData("players");
    let games = readData("games");
    let playerGames = readData("player_games");

    let player = players.find(p => p.name === name);

    if (!player) {
        player = {
            id: players.length + 1,
            name,
            emoji,
            position: 1,
            bonus: 0,
            penalty: 0,
            current_game: null,
            status: "idle",
            last_dice: 0
        };
        players.push(player);
        writeData("players", players);
        console.log(`‚úÖ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫: ${name}`);
    } else {
        console.log(`üîÑ –ò–≥—Ä–æ–∫ ${name} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∏–≥—Ä—É`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ player_games
    let playerGameEntry = playerGames.find(pg => pg.player_id === player.id);
    if (!playerGameEntry) {
        playerGameEntry = { player_id: player.id, active_games: null, completed_games: [] };
        playerGames.push(playerGameEntry);
        writeData("player_games", playerGames);
        console.log(`üÜï –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ player_games –¥–ª—è –∏–≥—Ä–æ–∫–∞: ${name}`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    const currentGameName = player.current_game
        ? games.find(game => game.id === player.current_game)?.name || "–ù–µ—Ç –∏–≥—Ä—ã"
        : "–ù–µ—Ç –∏–≥—Ä—ã";

    player.current_game = currentGameName;

    res.json(player);
});

app.get("/players", (req, res) => {
    const players = readData("players");
    const games = readData("games");

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –≤ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
    const playersWithGames = players.map(player => ({
        ...player,
        current_game_name: player.current_game
            ? games.find(game => game.id === player.current_game)?.name || "–ù–µ—Ç –∏–≥—Ä—ã"
            : "–ù–µ—Ç –∏–≥—Ä—ã"
    }));

    res.json(playersWithGames);
});

app.post("/random", (req, res) => {
    const { name } = req.body;
    if (!name) return res.status(400).json({ error: "–ò–º—è –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });

    let players = readData("players");
    let games = readData("games");
    let playerGames = readData("player_games");
    let specialCells = readData("special_cells");

    let player = players.find(p => p.name === name);
    if (!player) return res.status(404).json({ error: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    let playerGameEntry = playerGames.find(pg => pg.player_id === player.id);

    let message = "";
    let selectedGame = null;

    // üìç –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥ –±—Ä–æ—Å–∫–æ–º
    const previousPosition = player.position;

    // üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ (1-6)
    const dice = Math.floor(Math.random() * 6) + 1;
    player.position += dice;
    player.last_dice = dice;

    // üõë –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∏–≥—Ä–æ–∫ 1000-–π –∫–ª–µ—Ç–∫–∏
    if (player.position >= 1000) {
        player.position = 1000;
        player.status = "finished";
        player.current_game = null;
        message = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—à–ª–∏ –¥–æ 1000-–π –∫–ª–µ—Ç–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É!";

        writeData("players", players);
        return res.json({ dice, newPosition: player.position, game: null, message });
    }

    // üõë –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–µ—Ç–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –°–¢–û–Ø–õ –∏–≥—Ä–æ–∫
    if (specialCells.red.includes(previousPosition)) {
        player.position -= dice * 2; // –î–≤–∏–≥–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
        message += "üî¥ –ö—Ä–∞—Å–Ω–∞—è –∫–ª–µ—Ç–∫–∞! –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥! ";
    }

    if (specialCells.green.includes(previousPosition)) {
        player.position += dice; // –£–¥–≤–∞–∏–≤–∞–µ–º —Ö–æ–¥
        message += "üü¢ –ó–µ–ª–µ–Ω–∞—è –∫–ª–µ—Ç–∫–∞! –û—á–∫–∏ —É–¥–≤–æ–µ–Ω—ã! ";
    }

    // üü° üü¢ üî¥ üîµ –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –í –õ–Æ–ë–û–ú –°–õ–£–ß–ê–ï!
    if (specialCells.blue.includes(previousPosition)) {
        if (playerGameEntry.completed_games.length > 0) {
            const pastGames = games.filter(g => playerGameEntry.completed_games.includes(g.id));
            if (pastGames.length > 0) {
                selectedGame = pastGames[Math.floor(Math.random() * pastGames.length)];
                message += "üîµ –°–∏–Ω—è—è –∫–ª–µ—Ç–∫–∞! –í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è –∏–≥—Ä–∞. ";
            } else {
                message += "üîµ –°–∏–Ω—è—è –∫–ª–µ—Ç–∫–∞, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä. ";
            }
        }
    }

    if (!selectedGame) {
        if (specialCells.yellow[previousPosition]) {
            const genre = specialCells.yellow[previousPosition];
            const genreGames = games.filter(g => g.genre === genre &&
                !playerGameEntry.completed_games.includes(g.id) &&
                playerGameEntry.active_games !== g.id);
            if (genreGames.length > 0) {
                selectedGame = genreGames[Math.floor(Math.random() * genreGames.length)];
                message += `üü° –ñ–µ–ª—Ç–∞—è –∫–ª–µ—Ç–∫–∞! –í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ –∂–∞–Ω—Ä–∞ ${genre}. `;
            } else {
                message += `üü° –ñ–µ–ª—Ç–∞—è –∫–ª–µ—Ç–∫–∞, –Ω–æ –∏–≥—Ä –∂–∞–Ω—Ä–∞ ${genre} –±–æ–ª—å—à–µ –Ω–µ—Ç. `;
            }
        } else {
            // –ö—Ä–∞—Å–Ω–∞—è, —Å–∏–Ω—è—è –∏–ª–∏ –æ–±—ã—á–Ω–∞—è ‚Üí –õ–Æ–ë–ê–Ø –¥–æ—Å—Ç—É–ø–Ω–∞—è –∏–≥—Ä–∞
            const availableGames = games.filter(g =>
                !playerGameEntry.completed_games.includes(g.id) &&
                playerGameEntry.active_games !== g.id);
            if (availableGames.length > 0) {
                selectedGame = availableGames[Math.floor(Math.random() * availableGames.length)];
                message += "üé≤ –í—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞. ";
            } else {
                message += "üé≤ –í—Å–µ –∏–≥—Ä—ã —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã! ";
            }
        }
    }

    // ‚úÖ –ò–≥—Ä–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –í–°–ï–ì–î–ê
    if (selectedGame) {
        player.current_game = selectedGame.id;
        player.status = "playing";

        if (!playerGameEntry) {
            playerGames.push({ player_id: player.id, active_games: selectedGame.id, completed_games: [] });
        } else {
            playerGameEntry.active_games = selectedGame.id;
        }
    }

    writeData("players", players);
    writeData("player_games", playerGames);

    res.json({ dice, newPosition: player.position, game: selectedGame, message });
});

app.post("/complete_game", (req, res) => {
    const { name, time_spent } = req.body;
    if (!name) return res.status(400).json({ error: "–ò–º—è –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });

    let players = readData("players");
    let playerGames = readData("player_games");
    let gameHistory = readData("game_history");
    let games = readData("games");

    let player = players.find(p => p.name === name);
    if (!player || !player.current_game) {
        return res.status(400).json({ error: "–ò–≥—Ä–æ–∫ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ" });
    }

    let playerGameEntry = playerGames.find(pg => pg.player_id === player.id);
    if (!playerGameEntry) return res.status(400).json({ error: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä" });

    let currentGame = games.find(g => g.id === player.current_game);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É –≤ `completed_games` –∏ –æ—á–∏—â–∞–µ–º `active_games`
    playerGameEntry.completed_games.push(player.current_game);
    playerGameEntry.active_games = null;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Ö–æ–¥—ã
    const bonusMoves = calculateReward(time_spent, 'completed');
    const pos = player.position;
    player.position += bonusMoves;

    let message = `–ò–≥—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! +${bonusMoves} —Ö–æ–¥–∞`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∏–≥—Ä–æ–∫ 1000-–π –∫–ª–µ—Ç–∫–∏
    if (player.position >= 1000) {
        player.position = 1000;
        player.status = "finished";
        player.current_game = null;
        message = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—à–ª–∏ –¥–æ 1000-–π –∫–ª–µ—Ç–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É!";
    } else {
        player.current_game = null;
        player.status = "completed";
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ö–æ–¥ –≤ `game_history.json`
    gameHistory.push({
        player_id: player.id,
        player_name: player.name,
        game_id: currentGame?.id || null,
        game_name: currentGame?.name || "–ù–µ—Ç –∏–≥—Ä—ã",
        status: "completed",
        time_spent: time_spent || null,
        dice: player.last_dice,
        new_position: player.position,
        position: pos,
        timestamp: new Date().toISOString()
    });

    writeData("player_games", playerGames);
    writeData("players", players);
    writeData("game_history", gameHistory);

    res.json({ message, player });
});

app.post("/drop_game", (req, res) => {
    const { name, time_spent } = req.body;
    if (!name) return res.status(400).json({ error: "–ò–º—è –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });

    let players = readData("players");
    let playerGames = readData("player_games");
    let gameHistory = readData("game_history");
    let games = readData("games");

    let player = players.find(p => p.name === name);
    if (!player || !player.current_game) {
        return res.status(400).json({ error: "–ò–≥—Ä–æ–∫ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ" });
    }

    let playerGameEntry = playerGames.find(pg => pg.player_id === player.id);
    if (!playerGameEntry) return res.status(400).json({ error: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä" });

    let currentGame = games.find(g => g.id === player.current_game);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É –≤ `completed_games` –∏ –æ—á–∏—â–∞–µ–º `active_games`
    playerGameEntry.completed_games.push(player.current_game);
    playerGameEntry.active_games = null;

    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞–∑–∞–¥
    const penaltyMoves = calculateReward(time_spent, "dropped");
    const pos = player.position;
    player.position += penaltyMoves;
    player.position = Math.max(player.position, 1); // –ù–µ –¥–∞–µ–º —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å

    // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ `completed_games`)
    playerGameEntry.active_games = null;

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
    player.current_game = null;
    player.status = "idle";

    // –õ–æ–≥–∏—Ä—É–µ–º —Ö–æ–¥ –≤ `game_history.json`
    gameHistory.push({
        player_id: player.id,
        player_name: player.name,
        game_id: currentGame?.id || null,
        game_name: currentGame?.name || "–ù–µ—Ç –∏–≥—Ä—ã",
        status: "dropped",
        time_spent: null,
        dice: player.last_dice,
        new_position: player.position,
        position: pos,
        timestamp: new Date().toISOString()
    });

    writeData("player_games", playerGames);
    writeData("players", players);
    writeData("game_history", gameHistory);

    res.json({ message: "–ò–≥—Ä–∞ –¥—Ä–æ–ø–Ω—É—Ç–∞, –ø–æ–∑–∏—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", player });
});

app.get("/special_cells", (req, res) => {
    const specialCells = readData("special_cells");
    res.json(specialCells);
});

app.get("/leaderboard", (req, res) => {
    let players = readData("players");

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    let leaderboard = players
        .sort((a, b) => b.position - a.position)
        .map(player => ({
            name: `${player.emoji} ${player.name}`,
            position: player.position
        }));

    res.json(leaderboard);
});

app.get("/game_history", (req, res) => {
    const { name } = req.query;
    if (!name) return res.status(400).json({ error: "–ò–º—è –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });

    let players = readData("players");
    let gameHistory = readData("game_history");

    let player = players.find(p => p.name === name);
    if (!player) return res.status(404).json({ error: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    const playerHistory = gameHistory
        .filter(h => h.player_id === player.id)
        .sort((a, b) => new Date(b.date) - new Date(a.date)); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)

    res.json(playerHistory);
});

function calculateReward(hours, status) {
    const rewards = readData("rewards");

    if (!hours || hours < 1) return 0; // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, –±–æ–Ω—É—Å/—à—Ç—Ä–∞—Ñ = 0

    const category = rewards[status];
    if (!category) return 0; // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω

    for (const range of category) {
        if (hours >= range.min && (range.max === null || hours <= range.max)) {
            return range.bonus || range.penalty || 0;
        }
    }

    return 0;
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(8080, () => {
    console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080");
});
